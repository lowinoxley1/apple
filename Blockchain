import hashlib
import json
import time

class Block:
    def __init__(self, index, transactions, timestamp, previous_hash, nonce=0):
        self.index = index                   # 区块索引
        self.transactions = transactions     # 交易列表
        self.timestamp = timestamp           # 时间戳
        self.previous_hash = previous_hash   # 前一区块的哈希
        self.nonce = nonce                   # 工作量证明随机数
        self.hash = self.compute_hash()      # 当前区块的哈希

    def compute_hash(self):
        """
        计算当前区块的 SHA-256 哈希
        """
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    difficulty = 2  # 挖矿难度（要求哈希前缀0的个数）

    def __init__(self):
        self.unconfirmed_transactions = []  # 待确认的交易
        self.chain = []
        self.create_genesis_block()

    def create_genesis_block(self):
        """
        创建创世区块
        """
        genesis_block = Block(0, [], time.time(), "0")
        self.chain.append(genesis_block)

    def last_block(self):
        return self.chain[-1]

    def proof_of_work(self, block):
        """
        工作量证明：不断调整 nonce 直到哈希满足难度要求
        """
        block.nonce = 0
        computed_hash = block.compute_hash()
        while not computed_hash.startswith('0' * Blockchain.difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()
        return computed_hash

    def add_block(self, block, proof):
        """
        验证并添加区块到链上
        """
        previous_hash = self.last_block().hash
        if previous_hash != block.previous_hash:
            return False
        if not self.is_valid_proof(block, proof):
            return False
        block.hash = proof
        self.chain.append(block)
        return True

    def is_valid_proof(self, block, block_hash):
        """
        验证区块哈希是否满足难度要求
        """
        return (block_hash.startswith('0' * Blockchain.difficulty) and
                block_hash == block.compute_hash())

# 使用示例
if __name__ == "__main__":
    blockchain = Blockchain()
    new_block = Block(index=1, transactions=[{"from": "Alice", "to": "Bob", "amount": 5}],
                      timestamp=time.time(), previous_hash=blockchain.last_block().hash)
    proof = blockchain.proof_of_work(new_block)
    added = blockchain.add_block(new_block, proof)
    print("区块是否添加成功：", added)

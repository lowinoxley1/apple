import heapq

class Node:
    def __init__(self, x, y, cost=0, heuristic=0, parent=None):
        self.x, self.y = x, y
        self.cost, self.heuristic = cost, heuristic
        self.parent = parent

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, goal):
    open_set, closed_set = [], set()
    heapq.heappush(open_set, Node(*start, heuristic=heuristic(start, goal)))
    
    while open_set:
        current = heapq.heappop(open_set)
        if (current.x, current.y) == goal:
            path = []
            while current:
                path.append((current.x, current.y))
                current = current.parent
            return path[::-1]

        closed_set.add((current.x, current.y))
        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
            nx, ny = current.x + dx, current.y + dy
            if (nx, ny) in closed_set or grid[ny][nx] == 1:
                continue

            neighbor = Node(nx, ny, current.cost + 1, heuristic((nx, ny), goal), current)
            heapq.heappush(open_set, neighbor)
    
    return None

# 示例地图
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]
print(astar(grid, (0, 0), (4, 4)))
